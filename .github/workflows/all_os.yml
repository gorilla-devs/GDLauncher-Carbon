name: All OS

on: push

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  # mac_arm64:
  #   defaults:
  #     run:
  #       working-directory: ./GDLauncher
  #   if: contains(github.ref, 'refs/heads/develop') || (github.event_name == 'push' && !contains(github.ref, 'refs/heads/develop') && !contains(github.ref, 'refs/heads/upstream') && contains(github.event.head_commit.message, '[RUN_ALL_CI_CHECKS]'))
  #   runs-on: macos-12
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         path: GDLauncher
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.16.0"
  #     - uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: 1.70.0
  #         targets: aarch64-apple-darwin
  #         components: clippy, rustfmt
  #     - name: Prepare
  #       run: |
  #         echo "" > crates/carbon_app/src/db.rs
  #         cargo fmt --check
  #     - run: |
  #         npm run sudo-init
  #         chmod -R a+x node_modules
  #     - name: Iridium patchfix
  #       run: node iridium_patchfix.js
  #     - name: Prisma codegen
  #       env:
  #         CARGO_INCREMENTAL: 0
  #       run: pnpm prisma:generate
  #     - name: Build
  #       run: pnpm build:mac-arm64
  #       env:
  #         CARGO_INCREMENTAL: 0
  #         BASE_API: ${{ vars.BASE_API }}
  #     - name: Lint
  #       run: pnpm lint
  #     - name: Clear target before tests to avoid folder getting too big
  #       run: rm -rf target
  #     - name: Test
  #       env:
  #         CARGO_INCREMENTAL: 0
  #         BASE_API: ${{ vars.BASE_API }}
  #       run: pnpm test
  # mac_x64:
  #   defaults:
  #     run:
  #       working-directory: ./GDLauncher
  #   if: contains(github.ref, 'refs/heads/develop') || (github.event_name == 'push' && !contains(github.ref, 'refs/heads/develop') && !contains(github.ref, 'refs/heads/upstream') && contains(github.event.head_commit.message, '[RUN_ALL_CI_CHECKS]'))
  #   runs-on: macos-12
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         path: GDLauncher
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: "18.16.0"
  #     - uses: dtolnay/rust-toolchain@master
  #       with:
  #         toolchain: 1.70.0
  #         targets: x86_64-apple-darwin
  #         components: clippy, rustfmt
  #     - name: Prepare
  #       run: |
  #         echo "" > crates/carbon_app/src/db.rs
  #         cargo fmt --check
  #     - run: |
  #         npm run sudo-init
  #         chmod -R a+x node_modules
  #     - name: Iridium patchfix
  #       run: node iridium_patchfix.js
  #     - name: Prisma codegen
  #       env:
  #         CARGO_INCREMENTAL: 0
  #       run: pnpm prisma:generate:mac-x64
  #     - name: Build
  #       run: pnpm build:mac-x64
  #       env:
  #         CARGO_INCREMENTAL: 0
  #         BASE_API: ${{ vars.BASE_API }}
  #     - name: Lint
  #       run: pnpm lint
  #     - name: Clear target before tests to avoid folder getting too big
  #       run: rm -rf target
  #     - name: Test
  #       env:
  #         CARGO_INCREMENTAL: 0
  #         BASE_API: ${{ vars.BASE_API }}
  #       run: pnpm test
  ubuntu_x64:
    defaults:
      run:
        working-directory: ./GDLauncher
    if: contains(github.ref, 'refs/heads/develop') || (github.event_name == 'push' && !contains(github.ref, 'refs/heads/develop') && contains(github.event.head_commit.message, '[RUN_ALL_CI_CHECKS]'))
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          path: GDLauncher
      - uses: actions/setup-node@v3
        with:
          node-version: "18.16.0"
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.70.0
          targets: x86_64-unknown-linux-gnu
          components: clippy, rustfmt
      - name: Prepare
        run: |
          echo "" > crates/carbon_app/src/db.rs
          cargo fmt --check
      - run: |
          npm run sudo-init
          chmod -R a+x node_modules
      - name: Iridium patchfix
        run: node iridium_patchfix.js
      - name: Prisma codegen
        env:
          CARGO_INCREMENTAL: 0
        run: pnpm prisma:generate:linux-x64
      - name: Build
        run: pnpm build:linux-x64
        env:
          CARGO_INCREMENTAL: 0
          BASE_API: ${{ vars.BASE_API }}
      - name: Lint
        run: pnpm lint
      - name: Clear target before tests to avoid folder getting too big
        run: rm -rf target
      - name: Test
        env:
          CARGO_INCREMENTAL: 0
          BASE_API: ${{ vars.BASE_API }}
        run: xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- pnpm test
  windows_x64:
    defaults:
      run:
        working-directory: ./GDLauncher
    if: contains(github.ref, 'refs/heads/develop') || (github.event_name == 'push' && !contains(github.ref, 'refs/heads/develop') && contains(github.event.head_commit.message, '[RUN_ALL_CI_CHECKS]'))
    runs-on: windows-2022
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          path: GDLauncher
      - uses: actions/setup-node@v3
        with:
          node-version: "18.16.0"
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.70.0
          targets: x86_64-pc-windows-msvc
          components: clippy, rustfmt
      - name: Prepare
        shell: bash
        run: |
          echo "" > crates/carbon_app/src/db.rs
          cargo fmt --check
      - name: init
        shell: bash
        run: npm run init
      - name: Iridium patchfix
        shell: bash
        run: node iridium_patchfix.js
      - name: Prisma codegen
        shell: bash
        env:
          CARGO_INCREMENTAL: 0
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: pnpm prisma:generate:win-x64
      - name: Build
        shell: bash
        run: pnpm build:win-x64
        env:
          CARGO_INCREMENTAL: 0
          BASE_API: ${{ vars.BASE_API }}
          CARGO_NET_GIT_FETCH_WITH_CLI: true
      - name: Lint
        shell: bash
        run: pnpm lint
      - name: Clear target before tests to avoid folder getting too big
        shell: bash
        run: rm -rf target
      - name: Test
        shell: bash
        env:
          CARGO_INCREMENTAL: 0
          BASE_API: ${{ vars.BASE_API }}
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: pnpm test
