datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

generator client {
  provider = "cargo prisma"
  output   = "../src/db.rs"
}

model AppConfiguration {
  id                              Int       @id @unique @default(0)
  theme                           String    @default("main")
  reducedMotion                   Boolean   @default(false)
  language                        String    @default("english")
  discordIntegration              Boolean   @default(true)
  releaseChannel                  String
  lastAppVersion                  String?
  activeAccountUuid               String?
  // Instances settings
  concurrentDownloads             Int       @default(10)
  downloadDependencies            Boolean   @default(true)
  instancesTileSize               Int       @default(2) // 1-5
  instancesGroupBy                String    @default("group")
  instancesGroupByAsc             Boolean   @default(true)
  instancesSortBy                 String    @default("name")
  instancesSortByAsc              Boolean   @default(true)
  showNews                        Boolean   @default(true)
  // Other settings
  deletionThroughRecycleBin       Boolean   @default(true)
  gameResolution                  String?
  launcherActionOnGameLaunch      String    @default("none")
  showAppCloseWarning             Boolean   @default(true)
  javaCustomArgs                  String    @default("")
  xmx                             Int
  xms                             Int       @default(1024)
  defaultInstanceGroup            Int?
  preLaunchHook                   String?
  wrapperCommand                  String?
  postExitHook                    String?
  isFirstLaunch                   Boolean   @default(true)
  autoManageJavaSystemProfiles    Boolean   @default(true)
  modPlatformBlacklist            String    @default("")
  modChannels                     String    @default("stable:true,beta:true,alpha:true")
  // Legal / metrics
  randomUserUuid                  String    @default(uuid())
  secret                          Bytes
  termsAndPrivacyAccepted         Boolean   @default(false)
  termsAndPrivacyAcceptedChecksum String? // Should ask again if this changes
  metricsEnabled                  Boolean   @default(false)
  metricsEnabledLastUpdate        DateTime? // should ask again after 12 months
}

model Java {
  id          String        @id @unique @default(uuid())
  path        String        @unique
  major       Int
  fullVersion String
  type        String
  os          String
  arch        String
  vendor      String
  isValid     Boolean       @default(true)
  JavaProfile JavaProfile[]
}

model JavaProfile {
  name            String  @id
  isSystemProfile Boolean @default(false)
  java            Java?   @relation(fields: [javaId], references: [id], onDelete: SetNull)
  javaId          String?
}

model Account {
  uuid           String    @id
  username       String
  // presence signifies a microsoft account
  accessToken    String?
  tokenExpires   DateTime?
  msRefreshToken String?
  idToken        String?
  lastUsed       DateTime
  skinId         String?
}

model Skin {
  id   String @id
  skin Bytes
}

model HTTPCache {
  url          String    @id
  status_code  Int
  data         Bytes
  expiresAt    DateTime? @default(now())
  lastModified String?
  etag         String?
}

model ActiveDownloads {
  url     String @id
  file_id String @unique
}

model Instance {
  id            Int            @id @default(autoincrement())
  name          String
  shortpath     String         @unique
  favorite      Boolean        @default(false)
  hasPackUpdate Boolean        @default(false)
  index         Int
  group         InstanceGroup  @relation(fields: [groupId], references: [id])
  groupId       Int
  mods          ModFileCache[]
}

model VersionInfoCache {
  id            String   @id // mcVersion
  lastUpdatedAt DateTime @default(now()) @updatedAt
  versionInfo   Bytes
}

model PartialVersionInfoCache {
  id                 String   @id // modloaderName-modloaderVersion
  lastUpdatedAt      DateTime @default(now()) @updatedAt
  partialVersionInfo Bytes
}

model LwjglMetaCache {
  id            String   @id
  lastUpdatedAt DateTime @default(now()) @updatedAt
  lwjgl         Bytes
}

model AssetsMetaCache {
  id            String   @id
  lastUpdatedAt DateTime @default(now()) @updatedAt
  assetsIndex   Bytes
}

model InstanceGroup {
  id         Int        @id @default(autoincrement())
  name       String
  groupIndex Int
  instances  Instance[]
}

model ModFileCache {
  id            String      @id @default(uuid())
  lastUpdatedAt DateTime    @default(now()) @updatedAt
  instanceId    Int
  instance      Instance    @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  filename      String
  filesize      Int
  enabled       Boolean
  metadataId    String
  metadata      ModMetadata @relation(fields: [metadataId], references: [id], onDelete: Restrict)

  @@unique([instanceId, filename])
}

model ModMetadata {
  id            String              @id
  lastUpdatedAt DateTime            @default(now()) @updatedAt
  murmur2       Int
  sha512        Bytes
  sha1          Bytes
  name          String?
  modid         String?
  version       String?
  description   String?
  authors       String?
  modloaders    String
  logoImage     LocalModImageCache?
  curseforge    CurseForgeModCache?
  modrinth      ModrinthModCache?
  cachedFiles   ModFileCache[]
}

model CurseForgeModCache {
  metadataId  String                   @id
  murmur2     Int
  projectId   Int
  fileId      Int
  name        String
  version     String
  urlslug     String
  summary     String
  authors     String
  releaseType Int // alpha = 0, beta = 1, stable = 2
  updatePaths String // in the form `<gamever>,<modloader>,<channel>;<gamever>,<modloader>,<channel>` for every availible combination
  cachedAt    DateTime
  logoImage   CurseForgeModImageCache?
  metadata    ModMetadata              @relation(fields: [metadataId], references: [id], onDelete: Cascade)

  @@unique([projectId, fileId])
}

model ModrinthModCache {
  metadataId  String                 @id
  sha512      String
  projectId   String
  versionId   String
  title       String
  version     String
  urlslug     String
  description String
  authors     String
  releaseType Int // alpha = 0, beta = 1, stable = 2
  updatePaths String // in the form `<gamever>,<modloader>,<channel>;<gamever>,<modloader>,<channel>` for every availible combination
  filename    String
  fileUrl     String
  cachedAt    DateTime
  logoImage   ModrinthModImageCache?
  metadata    ModMetadata            @relation(fields: [metadataId], references: [id], onDelete: Cascade)

  @@unique([projectId, versionId])
}

model LocalModImageCache {
  metadataId String      @id
  data       Bytes
  metadata   ModMetadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)
}

model CurseForgeModImageCache {
  metadataId String             @id
  url        String
  data       Bytes?
  upToDate   Int                @default(0)
  metadata   CurseForgeModCache @relation(fields: [metadataId], references: [metadataId], onDelete: Cascade)
}

model ModrinthModImageCache {
  metadataId String           @id
  url        String
  data       Bytes?
  upToDate   Int              @default(0)
  metadata   ModrinthModCache @relation(fields: [metadataId], references: [metadataId], onDelete: Cascade)
}

model CurseForgeModpackCache {
  projectId   Int
  fileId      Int
  modpackName String
  versionName String
  urlSlug     String
  logoImage   CurseForgeModpackImageCache?
  updatedAt   DateTime                     @updatedAt

  @@id([projectId, fileId])
}

model ModrinthModpackCache {
  projectId   String
  versionId   String
  modpackName String
  versionName String
  urlSlug     String
  logoImage   ModrinthModpackImageCache?
  updatedAt   DateTime                   @updatedAt

  @@id([projectId, versionId])
}

model CurseForgeModpackImageCache {
  projectId              Int
  fileId                 Int
  url                    String
  data                   Bytes?
  CurseForgeModpackCache CurseForgeModpackCache @relation(fields: [projectId, fileId], references: [projectId, fileId], onDelete: Cascade)

  @@id([projectId, fileId])
}

model ModrinthModpackImageCache {
  projectId            String
  versionId            String
  url                  String
  data                 Bytes?
  ModrinthModpackCache ModrinthModpackCache @relation(fields: [projectId, versionId], references: [projectId, versionId], onDelete: Cascade)

  @@id([projectId, versionId])
}
