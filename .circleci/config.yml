version: 2.1

orbs:
  win: circleci/windows@5.0
  node: circleci/node@5.0.2

executors:
  linux:
    docker:
      - image: cimg/rust:1.67.0-browsers
    resource_class: large
  website:
    docker:
      - image: cimg/rust:1.67.0-node
    resource_class: small
  mac:
    macos:
      xcode: "14.1.0"
    resource_class: medium
  macm1:
    macos:
      xcode: "14.1.0"
    resource_class: medium
  windows: win/default

jobs:
  buildMac:
    parameters:
      os:
        type: string
    executor: <<parameters.os>>
    steps:
      - checkout
      # MACOS
      - when:
          condition:
            and:
              - equal: ["mac", <<parameters.os>>]
          steps:
            - run: |
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                source "$HOME/.cargo/env"
            - run: |
                node -v
                cargo --version
            - run: |
                echo "" > crates/carbon_app/src/db.rs
                cargo fmt --check
            - run: |
                sudo npm i -g pnpm
                pnpm i
                chmod -R a+x node_modules
            - run: pnpm codegen
            - run: pnpm build:mac-x64
            - run: pnpm lint
            - run: pnpm test
            - run: cd apps && cd desktop && pnpm clean
            - store_artifacts:
                path: ./apps/desktop/release
      # MACOS M1
      - when:
          condition:
            and:
              - equal: ["macm1", <<parameters.os>>]
          steps:
            - run: |
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                source "$HOME/.cargo/env"

            - run: |
                node -v
                cargo --version
            - run: |
                echo "" > crates/carbon_app/src/db.rs
                cargo fmt --check
            - run: |
                sudo npm i -g pnpm
                pnpm i
                chmod -R a+x node_modules
            - run: pnpm codegen
            - run: pnpm build:mac-arm64
            - run: pnpm lint
            - run: pnpm test
            - run: cd apps && cd desktop && pnpm clean
            - store_artifacts:
                path: ./apps/desktop/release
  buildWin:
    working_directory: ./
    executor:
      name: win/default
      size: large
    steps:
      - checkout
      - run:
          name: Install NVM
          shell: powershell.exe
          command: choco install nvm -y
      - run:
          name: Install Node 18.12.1
          shell: powershell.exe
          command: |
            nvm list
            nvm install 18.12.1
            nvm use 18.12.1
      - run:
          name: "Install Rust"
          shell: powershell.exe
          command: |
            $ProgressPreference = 'Continue'
            Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "C:\rustup-init.exe"
            & C:\rustup-init.exe -y --no-modify-path --profile minimal
            $env:path += ";$env:userprofile\.cargo\bin"
      - run: |
            rustc -Vv
            node -v
            cargo --version
            rustc --version | Out-File -FilePath "rust-version"
      - run: |
          echo "" > crates/carbon_app/src/db.rs
          cargo fmt --check
      - run:
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            npm i -g pnpm
            pnpm i
          shell: bash.exe
      - run:
          command: chmod -R a+x node_modules
          shell: bash.exe
      - run:
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            pnpm codegen
          shell: bash.exe
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - run:
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            pnpm build:win-x64
          shell: bash.exe
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - run:
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            pnpm lint
          shell: bash.exe
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - run:
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            pnpm test
          shell: bash.exe
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - run:
          command: cd apps && cd desktop && pnpm clean
          shell: bash.exe
      - store_artifacts:
          path: ./apps/desktop/release
  buildWebsite:
    executor: "website"
    steps:
      - checkout
      - run: |
          node -v
          sudo npm i -g pnpm
          pnpm i
          chmod -R a+x node_modules
      # - run: pnpm test
      - run: pnpm build-web
      # - run: pnpm lint-web
      # - run: pnpm check-bundle-web
  testDocker:
    executor: "linux"
    steps:
      - checkout
      - run: |
          node -v
          cargo --version
      - run: |
          echo "" > crates/carbon_app/src/db.rs
          cargo fmt --check
      - run: |
          sudo npm i -g pnpm
          pnpm i
          chmod -R a+x node_modules
      - run: pnpm codegen
      - run: IS_DOCKER_TEST=true pnpm build:linux-x64
      - run: pnpm lint
      - run: pnpm test
      - run: pnpm check-bundle
      - run: cd apps && cd desktop && pnpm clean
  buildLinux:
    executor: "linux"
    steps:
      - checkout
      - run: |
          node -v
          cargo --version
      - run: |
          echo "" > crates/carbon_app/src/db.rs
          cargo fmt --check
      - run: |
          sudo npm i -g pnpm
          pnpm i
          chmod -R a+x node_modules
      - run: pnpm codegen
      - run: pnpm build:linux-x64
      - run: pnpm lint
      - run: pnpm test
      - run: cd apps && cd desktop && pnpm clean
      - store_artifacts:
          path: ./apps/desktop/release
workflows:
  every-commit:
    jobs:
      - buildWebsite
      - testDocker:
          filters:
            branches:
              ignore:
                - master
                - develop
  master-develop-builds:
    jobs:
      - buildMac:
          filters:
            branches:
              only:
                - master
                - develop
          matrix:
            parameters:
              os: ["mac", "macm1"]
      - buildWin:
          filters:
            branches:
              only:
                - master
                - develop
      - buildLinux:
          filters:
            branches:
              only:
                - master
                - develop
